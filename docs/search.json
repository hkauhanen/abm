[
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Note\n\n\n\nThe syllabus is tentative – topics may get rearranged as the course proceeds.\n© 2024 Henri Kauhanen. Reproduction of these materials without written permission from the author is prohibited."
  },
  {
    "objectID": "syllabus.html#timetable",
    "href": "syllabus.html#timetable",
    "title": "Syllabus",
    "section": "Timetable",
    "text": "Timetable\n\n\n\nDate\nTopic\nHomework\nReading\n\n\n\n\n9.4.\nWelcome + Intro to ABMs\nInstalling julia\nGilbert (2020), chapter 1\n\n\n16.4.\nProgramming basics\n\n\n\n\n23.4.\nA model of language learning\n\n\n\n\n30.4.\nTwo models of language change\n\n\n\n\n7.5.\nSocial networks\n\n\n\n\n14.5.\nSpatial typology\n\n\n\n\n21.5.\nProgramming best practices\n\n\n\n\n28.5.\nNo lecture (Vorlesungsfreie Zeit)\n\n\n\n\n4.6.\nNo lecture (Vertiefungswoche)\n\n\n\n\n11.6.\nExemplar dynamics\n\n\n\n\n18.6.\nConformity\n\n\n\n\n25.6.\nRoaming in space\n\n\n\n\n2.7.\nPresentations 1\n\n\n\n\n9.7.\nPresentations 2\n\n\n\n\n16.7.\nExam"
  },
  {
    "objectID": "syllabus.html#course-requirements",
    "href": "syllabus.html#course-requirements",
    "title": "Syllabus",
    "section": "Course requirements",
    "text": "Course requirements\nTo pass this course, you will need to satisfactorily complete both:\n\nThe final exam\nSmall programming project + in-class presentation + written report, either solo or in small group (depending on your preference)\n\nThe examination will be based on the following materials:\n\nLectures and associated lecture notes (on this website)\nHomework contents (on this website)\nReadings (on ILIAS)\n\nProgramming project topics need to be decided before the Vorlesungsfreie Zeit. However, I encourage you to start thinking about potential topics as soon as possible, and, if you want to work in a group, also to form your group as early as possible."
  },
  {
    "objectID": "lectures/intro-slides.html#what-is-an-agent-based-model-abm",
    "href": "lectures/intro-slides.html#what-is-an-agent-based-model-abm",
    "title": "Intro to ABMs",
    "section": "What is an agent-based model (ABM)?",
    "text": "What is an agent-based model (ABM)?\n\nNo rigorous definition (like most applied science)\nBut: can characterize as a model consisting of\n\nentities (the agents)…\n…which act1 upon each other…\n…in some kind of environment…\n…to create some emergent outcome\n\n“Emergent” = collective is more than the sum of its parts\nImplemented computationally, sometimes also analysed mathematically\n\nEng. agent &lt; Lat. agens, pres. part. of ago ‘act’"
  },
  {
    "objectID": "lectures/intro-slides.html#what-is-the-benefit-of-abms",
    "href": "lectures/intro-slides.html#what-is-the-benefit-of-abms",
    "title": "Intro to ABMs",
    "section": "What is the benefit of ABMs?",
    "text": "What is the benefit of ABMs?\n\n“Like equation-based modeling, but unlike prose, agent-based models must be complete, consistent, and unambiguous” (Gilbert 2020, xii, my emphasis)\n\n\n\ncomplete: the modeller cannot leave anything out of the model description\nconsistent: no part of the model can logically contradict another part of the same model\nunambiguous: the meaning of every part of the model must be objectively clear"
  },
  {
    "objectID": "lectures/intro-slides.html#what-is-the-benefit-of-abms-1",
    "href": "lectures/intro-slides.html#what-is-the-benefit-of-abms-1",
    "title": "Intro to ABMs",
    "section": "What is the benefit of ABMs?",
    "text": "What is the benefit of ABMs?\n\n“Like equation-based modeling, but unlike prose, agent-based models must be complete, consistent, and unambiguous if they are to be capable of being executed on a computer” (Gilbert 2020, xii, my emphasis)\n\n\ncomplete: the modeller cannot leave anything out of the model description\nconsistent: no part of the model can logically contradict another part of the same model\nunambiguous: the meaning of every part of the model must be objectively clear"
  },
  {
    "objectID": "lectures/intro-slides.html#examples",
    "href": "lectures/intro-slides.html#examples",
    "title": "Intro to ABMs",
    "section": "Examples",
    "text": "Examples\nThese concepts are best explained through the use of examples…\n…so let’s look at a few!1\nThe examples are taken from the Example Zoo of the Agents.jl package (released under the MIT license)."
  },
  {
    "objectID": "lectures/intro-slides.html#example-1-conways-game-of-life",
    "href": "lectures/intro-slides.html#example-1-conways-game-of-life",
    "title": "Intro to ABMs",
    "section": "Example 1: Conway’s Game of Life",
    "text": "Example 1: Conway’s Game of Life\n\nEarly example of a cellular automaton (Gardner 1970)\nLattice; each cell either “live” (L) or “dead” (D)\nRules:\n\n\n\n\nRule\nCell\nNeighbourhood\nResult\n\n\n\n\n“underpopulation”\nL\n&lt; 2 L cells\nL \\(\\to\\) D\n\n\n“sustenance”\nL\n2 or 3 L cells\nL \\(\\to\\) L\n\n\n“overpopulation”\nL\n&gt; 3 L cells\nL \\(\\to\\) D\n\n\n“reproduction”\nD\n3 L cells\nD \\(\\to\\) L"
  },
  {
    "objectID": "lectures/intro-slides.html#question",
    "href": "lectures/intro-slides.html#question",
    "title": "Intro to ABMs",
    "section": "Question",
    "text": "Question\nEarlier we said ABMs are complete, consistent and unambiguous.\nWhat have I left out of the definition of Conway’s Game of Life? (I.e. why is my description so far incomplete?)"
  },
  {
    "objectID": "lectures/intro-slides.html#question-1",
    "href": "lectures/intro-slides.html#question-1",
    "title": "Intro to ABMs",
    "section": "Question",
    "text": "Question\n\n\n\n\n\n\n\nAnswer\n\n\nThree very important things (at least):\n\nIs the lattice finite or infinite? If finite, then what happens at the boundaries? – It is infinite.\nAre the agents (the cells) updated synchronously (all at once) or asynchronously? – Synchronously.\nHow are a cell’s neighbours defined? – It’s the 8 cells surrounding it."
  },
  {
    "objectID": "lectures/intro-slides.html#exercise",
    "href": "lectures/intro-slides.html#exercise",
    "title": "Intro to ABMs",
    "section": "Exercise",
    "text": "Exercise\nWhat happens to the cells in A? What happens to those in B? (Black = live, white = dead)\n\n\nA\n\n\nB"
  },
  {
    "objectID": "lectures/intro-slides.html#exercise-1",
    "href": "lectures/intro-slides.html#exercise-1",
    "title": "Intro to ABMs",
    "section": "Exercise",
    "text": "Exercise\n\n\n\n\n\n\n\nAnswer\n\n\nA is stable, B oscillates:\n\n\nA\n\n\nB"
  },
  {
    "objectID": "lectures/intro-slides.html#species",
    "href": "lectures/intro-slides.html#species",
    "title": "Intro to ABMs",
    "section": "Species",
    "text": "Species\nThe game supports many life forms (“species”), categorized into:1\n\n\n\nStill lifes, e.g.   \n\n\n\nOscillators, e.g.   \n\n\n\nSpaceships, e.g.  \n\n\n\nImages of Game of Life species from Wikimedia Commons (public domain)."
  },
  {
    "objectID": "lectures/intro-slides.html#emergence",
    "href": "lectures/intro-slides.html#emergence",
    "title": "Intro to ABMs",
    "section": "Emergence",
    "text": "Emergence\n\nThe game has simple rules, complex behaviour\nIt is undecidable: given a starting state S and a proposed other state O, we can prove that it is impossible to prove whether O will ever be reached from S!\nNew facts about the game are still being discovered: 2018 discovery of “knightships” (spaceships that move like the knight in chess)"
  },
  {
    "objectID": "lectures/intro-slides.html#example-2-flocking",
    "href": "lectures/intro-slides.html#example-2-flocking",
    "title": "Intro to ABMs",
    "section": "Example 2: Flocking",
    "text": "Example 2: Flocking"
  },
  {
    "objectID": "lectures/intro-slides.html#example-2-flocking-1",
    "href": "lectures/intro-slides.html#example-2-flocking-1",
    "title": "Intro to ABMs",
    "section": "Example 2: Flocking",
    "text": "Example 2: Flocking\n\nA simple model of the emergence of collective behaviour, flocking in birds1\nBirds follow three rules:\n\nCollision avoidance: maintain a minimum distance to other birds\nTracking: fly towards the average position of neighbouring birds\nNavigation: fly in the average direction of your neighbours\n\n\nReynolds (1987), and much research thereafter, importantly Vicsek et al. (1995) and subsequent."
  },
  {
    "objectID": "lectures/intro-slides.html#example-3-social-distancing",
    "href": "lectures/intro-slides.html#example-3-social-distancing",
    "title": "Intro to ABMs",
    "section": "Example 3: Social Distancing",
    "text": "Example 3: Social Distancing\n\nSIR (susceptible-infected-recovered) models are used to model epidemics, e.g. the spread of viruses1\nSuch models can be extended with aspects such as social distancing – implemented here as agents which remain stationary\nIn the following animations,\n\nblack dot = susceptible (healthy) individual\nred dot = infected individual\ngreen dot = recovered individual\n\n\nSee Vynnycky and White (2010) for an overview."
  },
  {
    "objectID": "lectures/intro-slides.html#bounded-rationality-locality",
    "href": "lectures/intro-slides.html#bounded-rationality-locality",
    "title": "Intro to ABMs",
    "section": "Bounded rationality / Locality",
    "text": "Bounded rationality / Locality\n\nCommon to all these examples is the following observation: the agents have bounded rationality\n\nIn Flocking, individual birds follow only three simple rules defined over the bird’s neighbours\nA bird does not know what flocking means, nor does it have a rule to accomplish flocking\nRather, flocking emerges as the collective behaviour of a group of birds\n\nIn other words, global patterns arise from numerous local interactions\nSimilar remarks apply to Game of Life and Social Distancing, indeed to any ABM"
  },
  {
    "objectID": "lectures/intro-slides.html#challenges-in-abm",
    "href": "lectures/intro-slides.html#challenges-in-abm",
    "title": "Intro to ABMs",
    "section": "Challenges in ABM",
    "text": "Challenges in ABM\n\nHow do we know what to model?\nHow do we test our models against empirical data?\nHow do we implement our models computationally?"
  },
  {
    "objectID": "lectures/intro-slides.html#challenges-of-computational-implementation",
    "href": "lectures/intro-slides.html#challenges-of-computational-implementation",
    "title": "Intro to ABMs",
    "section": "Challenges of computational implementation",
    "text": "Challenges of computational implementation\n\nSpeed: we want simulations to be fast\nRandomness: when our code calls for random numbers, we want them to be really random!\nCleanliness: we want our code to be understandable to other users\nReproducibility: when others run our code, they should get the same results we do"
  },
  {
    "objectID": "lectures/intro-slides.html#why-is-speed-an-issue",
    "href": "lectures/intro-slides.html#why-is-speed-an-issue",
    "title": "Intro to ABMs",
    "section": "Why is speed an issue?",
    "text": "Why is speed an issue?\n\nCentral processing units (CPUs) in modern computers carry out billions of instructions each second\nHowever, with ABMs, computational requirements may be significant, and may not scale nicely"
  },
  {
    "objectID": "lectures/intro-slides.html#exampleexercise",
    "href": "lectures/intro-slides.html#exampleexercise",
    "title": "Intro to ABMs",
    "section": "Example/Exercise",
    "text": "Example/Exercise\n\nAssume:\n\nYou have a model such that one simulation run, with a given set of parameter values, takes 1 minute to complete.\nYour model has 2 parameters, each of which can assume 100 different values.\nYou want to replicate the simulation for each parameter combination 100 times for statistical reasons.\n\nHow long will it take for your entire simulation to complete?"
  },
  {
    "objectID": "lectures/intro-slides.html#exampleexercise-1",
    "href": "lectures/intro-slides.html#exampleexercise-1",
    "title": "Intro to ABMs",
    "section": "Example/Exercise",
    "text": "Example/Exercise\n\n\n\n\n\n\n\nAnswer\n\n\n2 parameters with 100 values each results in 100 x 100 = 10,000 parameter combinations. Thus, in total, we have 100 x 10,000 = 1 million simulation runs to complete. If each run takes 1 minute, the total is 1 million minutes. This corresponds to roughly 2 years!"
  },
  {
    "objectID": "lectures/intro-slides.html#how-to-deal-with-issues-of-speed",
    "href": "lectures/intro-slides.html#how-to-deal-with-issues-of-speed",
    "title": "Intro to ABMs",
    "section": "How to deal with issues of speed",
    "text": "How to deal with issues of speed\n\nChoose a suitable programming language\nWrite performant code\nWhenever possible, parallelize your code\n\nThis means running it simultaneously across many CPUs/computers; we will see later how it’s done"
  },
  {
    "objectID": "lectures/intro-slides.html#why-is-randomness-needed",
    "href": "lectures/intro-slides.html#why-is-randomness-needed",
    "title": "Intro to ABMs",
    "section": "Why is randomness needed?",
    "text": "Why is randomness needed?\n\nQuite simple: real-world processes are complex, and to model such complex processes we resort to stochastic processes\nA stochastic process is a sequence of random variables\nFor example, consider a “navigating” agent that turns into a random direction whenever it doesn’t know how to proceed otherwise. In this case, the random direction needs to be generated using a random number.\nOr consider a linguistic example: suppose Mary is friends with Bob, Fiona and Charles. Unless we want to claim that Mary’s interactions with the other people are deterministic (which does not seem particularly sensible), we need some way of selecting interlocutors at random."
  },
  {
    "objectID": "lectures/intro-slides.html#why-is-randomness-an-issue",
    "href": "lectures/intro-slides.html#why-is-randomness-an-issue",
    "title": "Intro to ABMs",
    "section": "Why is randomness an issue?",
    "text": "Why is randomness an issue?\n\nConventional computers are deterministic devices\nSo, if we need, say, a random number between 0 and 1, how is that accomplished?\nThe answer is a pseudorandom number generator (PRNG)\n\nThis is an algorithm that generates a (long, but not infinite!) sequence of numbers which has the appearance of being random\nThe sequence is generated from a seed number. If you give the PRNG the same seed, you will get the same “random” sequence of numbers (this takes care of the reproducibility requirement).\nHowever, there are significant issues…"
  },
  {
    "objectID": "lectures/intro-slides.html#issues-with-prngs",
    "href": "lectures/intro-slides.html#issues-with-prngs",
    "title": "Intro to ABMs",
    "section": "Issues with PRNGs",
    "text": "Issues with PRNGs\n\nSuppose your PRNG generates a sequence of 1M numbers…\n…but in your simulation you need to generate 10M random numbers1\nThen your “random” numbers will repeat 10 times\nThis means that different parts of your simulation are not independent of each other – a major problem!\nFurther issues can arise when we look at parallel processing… but more on that later!\n\nWe’ll see later that this is by no means a crazy requirement!"
  },
  {
    "objectID": "lectures/intro-slides.html#summary",
    "href": "lectures/intro-slides.html#summary",
    "title": "Intro to ABMs",
    "section": "Summary",
    "text": "Summary\n\nABM is a powerful framework for modelling real-world processes\nModels are complete, consistent and unambiguous\nIndividual agents exhibit bounded rationality\nChallenges involve, among other things, simulation speed and proper implementation of randomness"
  },
  {
    "objectID": "lectures/intro-slides.html#the-scientific-community",
    "href": "lectures/intro-slides.html#the-scientific-community",
    "title": "Intro to ABMs",
    "section": "The scientific community",
    "text": "The scientific community\n\nABMs are created and explored by people in all manners of disciplines from physics and chemistry to linguistics and economics\nExamples of professional organisation in social sciences and linguistics:\n\nEuropean Social Simulation Association\nThe Journal of Artificial Societies and Social Simulation\nThe International Society for Computational Social Science (+IC2S2 conference)\nLanguage Dynamics and Change (journal)"
  },
  {
    "objectID": "lectures/intro-slides.html#homework",
    "href": "lectures/intro-slides.html#homework",
    "title": "Intro to ABMs",
    "section": "Homework",
    "text": "Homework\nNext week, we will begin programming. To prepare your computer for this, complete the homework “Installing Julia” on the course website."
  },
  {
    "objectID": "lectures/intro-slides.html#references",
    "href": "lectures/intro-slides.html#references",
    "title": "Intro to ABMs",
    "section": "References",
    "text": "References\n\n\n\n\n\n\n\n\nGardner, Martin. 1970. “The Fantastic Combinations of John Conway’s New Solitaire Game ’Life’.” Scientific American 223 (4): 120–23. https://doi.org/10.1038/scientificamerican1070-120.\n\n\nGilbert, Nigel. 2020. Agent-Based Models. Second edition. London: SAGE.\n\n\nReynolds, Craig W. 1987. “Flocks, Herds and Schools: A Distributed Behavioral Model.” ACM SIGRAPH Computer Graphics 21 (4): 25–34. https://doi.org/10.1145/37402.37406.\n\n\nVicsek, Tamás, András Czirók, Eshel Ben-Jacob, Inon Cohen, and Ofer Shochet. 1995. “Novel Type of Phase Transition in a System of Self-Driven Particles.” Physical Review Letters 75: 1226–29. https://doi.org/10.1103/PhysRevLett.75.1226.\n\n\nVynnycky, Emilia, and Richard G. White. 2010. An Introduction to Infectious Disease Modelling. Oxford: Oxford University Press."
  },
  {
    "objectID": "lectures/intro.html",
    "href": "lectures/intro.html",
    "title": "Intro to ABMs",
    "section": "",
    "text": "No rigorous definition (like most applied science)\nBut: can characterize as a model consisting of\n\nentities (the agents)…\n…which act1 upon each other…\n…in some kind of environment…\n…to create some emergent outcome\n\n“Emergent” = collective is more than the sum of its parts\nImplemented computationally, sometimes also analysed mathematically\n\n1 Eng. agent &lt; Lat. agens, pres. part. of ago ‘act’\n© 2024 Henri Kauhanen. Reproduction of these materials without written permission from the author is prohibited."
  },
  {
    "objectID": "lectures/intro.html#what-is-an-agent-based-model-abm",
    "href": "lectures/intro.html#what-is-an-agent-based-model-abm",
    "title": "Intro to ABMs",
    "section": "",
    "text": "No rigorous definition (like most applied science)\nBut: can characterize as a model consisting of\n\nentities (the agents)…\n…which act1 upon each other…\n…in some kind of environment…\n…to create some emergent outcome\n\n“Emergent” = collective is more than the sum of its parts\nImplemented computationally, sometimes also analysed mathematically\n\n1 Eng. agent &lt; Lat. agens, pres. part. of ago ‘act’"
  },
  {
    "objectID": "lectures/intro.html#what-is-the-benefit-of-abms-1",
    "href": "lectures/intro.html#what-is-the-benefit-of-abms-1",
    "title": "Intro to ABMs",
    "section": "What is the benefit of ABMs?",
    "text": "What is the benefit of ABMs?\n\n“Like equation-based modeling, but unlike prose, agent-based models must be complete, consistent, and unambiguous if they are to be capable of being executed on a computer” (Gilbert 2020, xii, my emphasis)\n\n\ncomplete: the modeller cannot leave anything out of the model description\nconsistent: no part of the model can logically contradict another part of the same model\nunambiguous: the meaning of every part of the model must be objectively clear"
  },
  {
    "objectID": "lectures/intro.html#examples",
    "href": "lectures/intro.html#examples",
    "title": "Intro to ABMs",
    "section": "Examples",
    "text": "Examples\nThese concepts are best explained through the use of examples…\n…so let’s look at a few!2\n2 The examples are taken from the Example Zoo of the Agents.jl package (released under the MIT license)."
  },
  {
    "objectID": "lectures/intro.html#example-1-conways-game-of-life",
    "href": "lectures/intro.html#example-1-conways-game-of-life",
    "title": "Intro to ABMs",
    "section": "Example 1: Conway’s Game of Life",
    "text": "Example 1: Conway’s Game of Life\n\nEarly example of a cellular automaton (Gardner 1970)\nLattice; each cell either “live” (L) or “dead” (D)\nRules:\n\n\n\n\nRule\nCell\nNeighbourhood\nResult\n\n\n\n\n“underpopulation”\nL\n&lt; 2 L cells\nL \\(\\to\\) D\n\n\n“sustenance”\nL\n2 or 3 L cells\nL \\(\\to\\) L\n\n\n“overpopulation”\nL\n&gt; 3 L cells\nL \\(\\to\\) D\n\n\n“reproduction”\nD\n3 L cells\nD \\(\\to\\) L"
  },
  {
    "objectID": "lectures/intro.html#question",
    "href": "lectures/intro.html#question",
    "title": "Intro to ABMs",
    "section": "Question",
    "text": "Question\nEarlier we said ABMs are complete, consistent and unambiguous.\nWhat have I left out of the definition of Conway’s Game of Life? (I.e. why is my description so far incomplete?)\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThree very important things (at least):\n\nIs the lattice finite or infinite? If finite, then what happens at the boundaries? – It is infinite.\nAre the agents (the cells) updated synchronously (all at once) or asynchronously? – Synchronously.\nHow are a cell’s neighbours defined? – It’s the 8 cells surrounding it."
  },
  {
    "objectID": "lectures/intro.html#exercise",
    "href": "lectures/intro.html#exercise",
    "title": "Intro to ABMs",
    "section": "Exercise",
    "text": "Exercise\nWhat happens to the cells in A? What happens to those in B? (Black = live, white = dead)\n\n\nA\n\n\nB\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nA is stable, B oscillates:\n\n\nA\n\n\nB"
  },
  {
    "objectID": "lectures/intro.html#species",
    "href": "lectures/intro.html#species",
    "title": "Intro to ABMs",
    "section": "Species",
    "text": "Species\nThe game supports many life forms (“species”), categorized into:3\n3 Images of Game of Life species from Wikimedia Commons (public domain).\n\n\nStill lifes, e.g.   \n\n\n\nOscillators, e.g.   \n\n\n\nSpaceships, e.g."
  },
  {
    "objectID": "lectures/intro.html#emergence",
    "href": "lectures/intro.html#emergence",
    "title": "Intro to ABMs",
    "section": "Emergence",
    "text": "Emergence\n\nThe game has simple rules, complex behaviour\nIt is undecidable: given a starting state S and a proposed other state O, we can prove that it is impossible to prove whether O will ever be reached from S!\nNew facts about the game are still being discovered: 2018 discovery of “knightships” (spaceships that move like the knight in chess)"
  },
  {
    "objectID": "lectures/intro.html#example-2-flocking",
    "href": "lectures/intro.html#example-2-flocking",
    "title": "Intro to ABMs",
    "section": "Example 2: Flocking",
    "text": "Example 2: Flocking"
  },
  {
    "objectID": "lectures/intro.html#example-2-flocking-1",
    "href": "lectures/intro.html#example-2-flocking-1",
    "title": "Intro to ABMs",
    "section": "Example 2: Flocking",
    "text": "Example 2: Flocking\n\nA simple model of the emergence of collective behaviour, flocking in birds4\nBirds follow three rules:\n\nCollision avoidance: maintain a minimum distance to other birds\nTracking: fly towards the average position of neighbouring birds\nNavigation: fly in the average direction of your neighbours\n\n\n4 Reynolds (1987), and much research thereafter, importantly Vicsek et al. (1995) and subsequent."
  },
  {
    "objectID": "lectures/intro.html#example-3-social-distancing",
    "href": "lectures/intro.html#example-3-social-distancing",
    "title": "Intro to ABMs",
    "section": "Example 3: Social Distancing",
    "text": "Example 3: Social Distancing\n\nSIR (susceptible-infected-recovered) models are used to model epidemics, e.g. the spread of viruses5\nSuch models can be extended with aspects such as social distancing – implemented here as agents which remain stationary\nIn the following animations,\n\nblack dot = susceptible (healthy) individual\nred dot = infected individual\ngreen dot = recovered individual\n\n\n5 See Vynnycky and White (2010) for an overview."
  },
  {
    "objectID": "lectures/intro.html#bounded-rationality-locality",
    "href": "lectures/intro.html#bounded-rationality-locality",
    "title": "Intro to ABMs",
    "section": "Bounded rationality / Locality",
    "text": "Bounded rationality / Locality\n\nCommon to all these examples is the following observation: the agents have bounded rationality\n\nIn Flocking, individual birds follow only three simple rules defined over the bird’s neighbours\nA bird does not know what flocking means, nor does it have a rule to accomplish flocking\nRather, flocking emerges as the collective behaviour of a group of birds\n\nIn other words, global patterns arise from numerous local interactions\nSimilar remarks apply to Game of Life and Social Distancing, indeed to any ABM"
  },
  {
    "objectID": "lectures/intro.html#challenges-in-abm",
    "href": "lectures/intro.html#challenges-in-abm",
    "title": "Intro to ABMs",
    "section": "Challenges in ABM",
    "text": "Challenges in ABM\n\nHow do we know what to model?\nHow do we test our models against empirical data?\nHow do we implement our models computationally?"
  },
  {
    "objectID": "lectures/intro.html#challenges-of-computational-implementation",
    "href": "lectures/intro.html#challenges-of-computational-implementation",
    "title": "Intro to ABMs",
    "section": "Challenges of computational implementation",
    "text": "Challenges of computational implementation\n\nSpeed: we want simulations to be fast\nRandomness: when our code calls for random numbers, we want them to be really random!\nCleanliness: we want our code to be understandable to other users\nReproducibility: when others run our code, they should get the same results we do"
  },
  {
    "objectID": "lectures/intro.html#why-is-speed-an-issue",
    "href": "lectures/intro.html#why-is-speed-an-issue",
    "title": "Intro to ABMs",
    "section": "Why is speed an issue?",
    "text": "Why is speed an issue?\n\nCentral processing units (CPUs) in modern computers carry out billions of instructions each second\nHowever, with ABMs, computational requirements may be significant, and may not scale nicely"
  },
  {
    "objectID": "lectures/intro.html#exampleexercise",
    "href": "lectures/intro.html#exampleexercise",
    "title": "Intro to ABMs",
    "section": "Example/Exercise",
    "text": "Example/Exercise\n\nAssume:\n\nYou have a model such that one simulation run, with a given set of parameter values, takes 1 minute to complete.\nYour model has 2 parameters, each of which can assume 100 different values.\nYou want to replicate the simulation for each parameter combination 100 times for statistical reasons.\n\nHow long will it take for your entire simulation to complete?\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n2 parameters with 100 values each results in 100 x 100 = 10,000 parameter combinations. Thus, in total, we have 100 x 10,000 = 1 million simulation runs to complete. If each run takes 1 minute, the total is 1 million minutes. This corresponds to roughly 2 years!"
  },
  {
    "objectID": "lectures/intro.html#how-to-deal-with-issues-of-speed",
    "href": "lectures/intro.html#how-to-deal-with-issues-of-speed",
    "title": "Intro to ABMs",
    "section": "How to deal with issues of speed",
    "text": "How to deal with issues of speed\n\nChoose a suitable programming language\nWrite performant code\nWhenever possible, parallelize your code\n\nThis means running it simultaneously across many CPUs/computers; we will see later how it’s done"
  },
  {
    "objectID": "lectures/intro.html#why-is-randomness-needed",
    "href": "lectures/intro.html#why-is-randomness-needed",
    "title": "Intro to ABMs",
    "section": "Why is randomness needed?",
    "text": "Why is randomness needed?\n\nQuite simple: real-world processes are complex, and to model such complex processes we resort to stochastic processes\nA stochastic process is a sequence of random variables\nFor example, consider a “navigating” agent that turns into a random direction whenever it doesn’t know how to proceed otherwise. In this case, the random direction needs to be generated using a random number.\nOr consider a linguistic example: suppose Mary is friends with Bob, Fiona and Charles. Unless we want to claim that Mary’s interactions with the other people are deterministic (which does not seem particularly sensible), we need some way of selecting interlocutors at random."
  },
  {
    "objectID": "lectures/intro.html#why-is-randomness-an-issue",
    "href": "lectures/intro.html#why-is-randomness-an-issue",
    "title": "Intro to ABMs",
    "section": "Why is randomness an issue?",
    "text": "Why is randomness an issue?\n\nConventional computers are deterministic devices\nSo, if we need, say, a random number between 0 and 1, how is that accomplished?\nThe answer is a pseudorandom number generator (PRNG)\n\nThis is an algorithm that generates a (long, but not infinite!) sequence of numbers which has the appearance of being random\nThe sequence is generated from a seed number. If you give the PRNG the same seed, you will get the same “random” sequence of numbers (this takes care of the reproducibility requirement).\nHowever, there are significant issues…"
  },
  {
    "objectID": "lectures/intro.html#issues-with-prngs",
    "href": "lectures/intro.html#issues-with-prngs",
    "title": "Intro to ABMs",
    "section": "Issues with PRNGs",
    "text": "Issues with PRNGs\n\nSuppose your PRNG generates a sequence of 1M numbers…\n…but in your simulation you need to generate 10M random numbers6\nThen your “random” numbers will repeat 10 times\nThis means that different parts of your simulation are not independent of each other – a major problem!\nFurther issues can arise when we look at parallel processing… but more on that later!\n\n6 We’ll see later that this is by no means a crazy requirement!"
  },
  {
    "objectID": "lectures/intro.html#summary",
    "href": "lectures/intro.html#summary",
    "title": "Intro to ABMs",
    "section": "Summary",
    "text": "Summary\n\nABM is a powerful framework for modelling real-world processes\nModels are complete, consistent and unambiguous\nIndividual agents exhibit bounded rationality\nChallenges involve, among other things, simulation speed and proper implementation of randomness"
  },
  {
    "objectID": "lectures/intro.html#the-scientific-community",
    "href": "lectures/intro.html#the-scientific-community",
    "title": "Intro to ABMs",
    "section": "The scientific community",
    "text": "The scientific community\n\nABMs are created and explored by people in all manners of disciplines from physics and chemistry to linguistics and economics\nExamples of professional organisation in social sciences and linguistics:\n\nEuropean Social Simulation Association\nThe Journal of Artificial Societies and Social Simulation\nThe International Society for Computational Social Science (+IC2S2 conference)\nLanguage Dynamics and Change (journal)"
  },
  {
    "objectID": "lectures/intro.html#homework",
    "href": "lectures/intro.html#homework",
    "title": "Intro to ABMs",
    "section": "Homework",
    "text": "Homework\nNext week, we will begin programming. To prepare your computer for this, complete the homework Installing Julia."
  },
  {
    "objectID": "homework.html",
    "href": "homework.html",
    "title": "Homework",
    "section": "",
    "text": "Installing Julia\n\n\n\n9 April 2024\n\n\n\n\n\n\n\n\nNo matching items\n\n© 2024 Henri Kauhanen. Reproduction of these materials without written permission from the author is prohibited."
  },
  {
    "objectID": "homework/installing-julia.html",
    "href": "homework/installing-julia.html",
    "title": "Installing Julia",
    "section": "",
    "text": "In this course, we will conduct all our programming work in the Julia programming language. This homework will guide you through the process of installing Julia on your computer. You will also be installing a few important packages (think of them as “add-ons” to the base Julia installation) that we will need later on. Finally, we will install an editor which will make dealing with source code a bit more convenient compared to just running Julia in a terminal window.\n\nNavigate to https://julialang.org, download the proper installation files for your operating system, and install Julia. Make sure to download version 1.10.2 or newer. (Older versions may not be fully compatible with the code we will be working with in this course.)\nWith installation complete, launch Julia. You should be greeted by a screen such as this:\n\nThis is known as the Julia REPL, which stands for read-eval(uate)-print loop. Here, you can give Julia commands, it will execute them, and you get the output back. For example, try the following commands:\n2+2\nsqrt(2)\n[1, 2, 3, 4]\nsum([1, 2, 3, 4])\nThe REPL can also be used to install packages i.e. extensions. We will now install two packages, Agents and CairoMakie, along with all their dependencies (i.e. further packages required to run those two packages). To do this, execute the following commands in the REPL:\nusing Pkg\nPkg.add(\"Agents\")\nPkg.add(\"CairoMakie\")\nThis will take a long while, as the two packages have many dependencies. Wait patiently. When everything is complete, you may exit the REPL:\nexit()\nIt would be very inconvenient to do all our coding in the REPL. It is much better to use a text editor or an IDE (integrated development environment). Here, you are free to make your own choice, if you already have a favourite editor for coding. For the purposes of this course, however, I recommend Visual Studio Code – this is the editor I will be using in the lectures, and so if you choose to use the same editor, things will be a bit smoother. To get started with VS Code, navigate to https://code.visualstudio.com/download, download the version for your operating system, and follow the instructions to install it.\nOnce VS Code has been successfully installed, we need to install a Julia extension for it. This will allow the editor to interface with your Julia installation, so that you will be able to execute code directly from the editor. Follow the instructions here, in bullet point number 3, to do this.\n\nIf all went well, you now have an up-to-date, working Julia installation, with a number of packages installed, plus a source code editor that interfaces seamlessly with that installation.\nIf something went wrong, try again. Google your problem to see if other users have already run into the same problem and have a solution. If it still refuses to work, bring your problem to the next lecture – we will discuss how to solve it and get you a working system.\n\nBonus\nIf you are already familiar with another programming language such as Python, I recommend you to watch this short video from IBM Technology detailing some of the major differences between Python and Julia. It does go into some technical details which may seem obscure for now (“dynamic typing”, “multiple dispatch”), but worry not – I will explain those concepts next week.\n\n\n\n\n\n© 2024 Henri Kauhanen. Reproduction of these materials without written permission from the author is prohibited."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Agent-based modelling",
    "section": "",
    "text": "Welcome to this course on agent-based models (ABMs). Use the top bar to navigate.\nThis website is “alive” – it will update as the course progresses, with new lectures and homework added regularly.\nI strongly recommend that you do the homework. Doing ABMs requires programming, and the best (perhaps only?) way of learning programming is by actually doing some programming.\nI also recommend bringing your laptop, if you have one, to the lectures. We will be doing little programming exercises and explorations in most of the lectures, and it will benefit you if you can do these hands-on.\nFinally, if you notice any errors or typos in the course materials, would you be so kind as to point them out to me either at lectures or via email (firstname lastname uni konstanz de). Thank you!\n– Henri\n\n\n\n\n\n\nAcknowledgements\n\n\n\n\n\nThese materials have benefitted immensely from the labours of the open source software movement. Thanks are due to the developers of Julia as well as to developers and contributors of the Agents.jl framework. Quarto made typesetting the materials a breeze – and fun.\n\n\n\n\n\n\n© 2024 Henri Kauhanen. Reproduction of these materials without written permission from the author is prohibited."
  },
  {
    "objectID": "lectures.html",
    "href": "lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "Intro to ABMs\n\n\n\n9 April 2024\n\n\n\n\n\n\n\n\nNo matching items\n\n© 2024 Henri Kauhanen. Reproduction of these materials without written permission from the author is prohibited."
  }
]