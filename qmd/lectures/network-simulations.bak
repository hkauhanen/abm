---
title: "Simulations on social networks"
date: 06/25/2024
image: "../img/network-simulations-image.png"
execute:
  echo: true
categories:
  - lecture
format:
  revealjs:
    output-file: network-simulations-slides.html
    mermaid-format: png
---

```{julia}
#| echo: false
#| eval: true
#| output: false
using Random
Random.seed!(123)
using Agents
using Graphs

include("../jl/VL2.jl")
using .VL
```

## Plan

- Last time we learned about (social) networks
- Today, we'll learn how to interface Graphs.jl with Agents.jl
- This allows ABM simulations on networks: our population of agents can now be structured in very interesting ways
- We'll also talk about how to gather statistics from simulation runs
- For a concrete example, we will implement a simulation with variational learners on a social network without spatial effects


::: {.content-visible when-format="revealjs"}
## Strategy
:::

- Recall the 5 steps to define a model in Agents.jl:
  1. Decide on model space
  1. Define agent type(s)
  1. Define rules that evolve the model
  1. Initialize your model
  1. Evolve, visualize and collect data

::: {.content-visible unless-format="revealjs"}
- For this particular application:
  1. Decide on model space --- no space needed
  1. Define agent type(s) --- reuse existing code
  1. Define rules that evolve the model --- reuse, with small modifications
  1. Initialize your model --- new: model properties
  1. Evolve, visualize and collect data --- we'll talk more about this
:::

::: {.content-visible when-format="revealjs"}
## Strategy

- Recall the 5 steps to define a model in Agents.jl:
  1. Decide on model space [--- no space needed]{.fragment}
  1. [Define agent type(s)]{.grey}
  1. [Define rules that evolve the model]{.grey}
  1. [Initialize your model]{.grey}
  1. [Evolve, visualize and collect data]{.grey}

## Strategy

- Recall the 5 steps to define a model in Agents.jl:
  1. [Decide on model space --- no space needed]{.grey}
  1. Define agent type(s) [--- reuse existing code]{.fragment}
  1. [Define rules that evolve the model]{.grey}
  1. [Initialize your model]{.grey}
  1. [Evolve, visualize and collect data]{.grey}

## Strategy

- Recall the 5 steps to define a model in Agents.jl:
  1. [Decide on model space --- no space needed]{.grey}
  1. [Define agent type(s) --- reuse existing code]{.grey}
  1. Define rules that evolve the model [--- reuse, with small modifications]{.fragment}
  1. [Initialize your model]{.grey}
  1. [Evolve, visualize and collect data]{.grey}

## Strategy

- Recall the 5 steps to define a model in Agents.jl:
  1. [Decide on model space --- no space needed]{.grey}
  1. [Define agent type(s) --- reuse existing code]{.grey}
  1. [Define rules that evolve the model --- reuse, with small modifications]{.grey}
  1. Initialize your model [--- new: model properties]{.fragment}
  1. [Evolve, visualize and collect data]{.grey}

## Strategy

- Recall the 5 steps to define a model in Agents.jl:
  1. [Decide on model space --- no space needed]{.grey}
  1. [Define agent type(s) --- reuse existing code]{.grey}
  1. [Define rules that evolve the model --- reuse, with small modifications]{.grey}
  1. [Initialize your model --- new: model properties]{.grey}
  1. Evolve, visualize and collect data [--- we'll talk more about this]{.fragment}

## Strategy

- Recall the 5 steps to define a model in Agents.jl:
  1. Decide on model space --- no space needed
  1. Define agent type(s) --- reuse existing code
  1. Define rules that evolve the model --- reuse, with small modifications
  1. Initialize your model --- new: model properties
  1. Evolve, visualize and collect data --- we'll talk more about this
:::

## 1. Space

- In [a previous lecture](structured.qmd), we used:

```{julia}
#|eval: false
dims = (10, 10)
space = GridSpace(dims)
```

- Now, we can simply use:

```{julia}
space = nothing
```

## 2. Agent

- Previously, we defined:

```{julia}
#|eval: false
@agent struct GridVL(GridAgent{2}) <: VL.VariationalLearner
  p::Float64
  gamma::Float64
  P1::Float64
  P2::Float64
end
```

::: {.content-visible when-format="revealjs"}
## 2. Agent
:::

- We now add a new type based on this:

```{julia}
#|eval: false
@agent struct NetVL(NoSpaceAgent) <: VL.VariationalLearner
  p::Float64
  gamma::Float64
  P1::Float64
  P2::Float64
end
```

## 3. Rules

- We previously used:

```{julia}
#|eval: false
function VL_step!(agent, model)
  interlocutor = random_nearby_agent(agent, model)
  interact!(interlocutor, agent)
end
```

::: {.content-visible when-format="revealjs"}
## 3. Rules
:::

- `random_nearby_agent` only works for agents in a space, so we need to write a new method for spaceless agents:

```{julia}
#|eval: false
function VL_step!(agent::NetVL, model)
  interlocutor = # ???
  interact!(interlocutor, agent)
end
```

- How do we sample an interlocutor for our agent so that the two are connected in our social network?


## Aside: agent IDs

- In Agents.jl, every agent in an ABM has a unique ID or identifier, which is an integer
  - The first agent created gets ID `1`, the second one gets `2`, and so on...
  - If `agent` is an agent, then `agent.id` returns its ID
  - To get the agent with ID `i`, use `model[i]`
- In Graphs.jl, every node is represented as an integer
- These two facts are very useful: we can associate the nodes of a graph with agents in a one-to-one manner


## Aside: node neighbo(u)rs

::: {.columns}
:::: {.column width="55%"}
- In Graphs.jl, you can use `neighbors(g, i)`^[British English spellers note: no *u* here!] to get the nodes which are adjacent to node `i` in graph `g`:

```{julia}
g = erdos_renyi(10, 0.4)
neighbors(g, 7)
```
::::
:::: {.column width="45%"}
```{julia}
#|echo: false
using GraphPlot
gplot(g, nodelabel=1:10)#, nodelabelsize=0.1)
```
::::
:::


## 3. Rules

- Assume for now that `model` has an internal field called `friends` which holds our social network
- Then, to get the nodes that are adjacent to `agent` in our network:

```{julia}
#|eval: false
adjacent_nodes = neighbors(model.friends, agent.id)
```

::: {.content-visible when-format="revealjs"}
. . . 
:::

- To get an interlocutor, we take a random neighbouring node and return the agent with this specific ID:

```{julia}
#|eval: false
random_adjacent = rand(adjacent_nodes)
model[random_adjacent]
```


## 3. Rules

- Putting all this together, we have:

```{julia}
#|eval: false
function VL_step!(agent::NetVL, model)
  adjacent_nodes = neighbors(model.friends, agent.id)
  random_adjacent = rand(adjacent_nodes)
  interlocutor = model[random_adjacent]
  interact!(interlocutor, agent)
end
```

::: {.content-visible when-format="revealjs"}
. . . 
:::

- One more problem, though: what if our agent happens to have no neighbours in the network?
  - Then `adjacent_nodes` is an empty array...
  - ...which means that `rand(adjacent_nodes)` will throw an error


::: {.content-visible when-format="revealjs"}
## 3. Rules
:::

- To avoid this potential problem, we can do:

```{julia}
#|eval: true
function VL_step!(agent::NetVL, model)
  adjacent_nodes = neighbors(model.friends, agent.id)
  
  if length(adjacent_nodes) > 0
    random_adjacent = rand(adjacent_nodes)
    interlocutor = model[random_adjacent]
    interact!(interlocutor, agent)
  end
end
```


## 4. Initialize model

- Previously, we used the following to initialize a model:

```{julia}
#|eval: false
model = StandardABM(GridVL,
                    GridSpace((10, 10)),
                    agent_step! = VL_step!)
```

::: {.content-visible when-format="revealjs"}
## 4. Initialize model
:::

- To create a spaceless model, we can now just do:

```{julia}
#|eval: false
model = StandardABM(NetVL,
                    nothing,
                    agent_step! = VL_step!)
```

- But how to incorporate the social network in here?

. . . 

- Solution: model properties


## Model properties

- Models in Agents.jl can take an optional `properties` keyword argument
- This is a **dictionary**
- In Julia in general, a dictionary relates a set of **keys** to a set of **values**
- They are created using `Dict(k1 => v1, k2 => v2, ...)`
  - `k1`, `k2`, ... are the keys
  - `v1`, `v2`, ... are the values

::: {.content-visible when-format="revealjs"}
## Model properties
:::

- Example dictionary:

```{julia}
#|output: false
captains = Dict("Germany" => "Gündoğan",
                "Italy" => "Donnarumma",
                "Spain" => "Morata",
                "England" => "Kane")
```

::: {.content-visible when-format="revealjs"}
. . .
:::

- Accessing values:

```{julia}
captains["Italy"]
```

::: {.content-visible when-format="revealjs"}
## Model properties
:::

- Dictionaries are iterable:

```{julia}
for (k, v) in captains
  println(k * "'s captain is " * v * "!")
end
```


## Aside: symbols

- The keys and values in a dictionary can be of whatever type (and not necessarily of the same type)
- Some authors prefer to use **symbols** in place of strings
- Symbols are prefixed with a colon (`:`) and are customarily in lower case:

```{julia}
#|output: true
captains = Dict(:germany => "Gündoğan",
                :italy => "Donnarumma",
                :spain => "Morata",
                :england => "Kane")

captains[:italy]
```

## Back to model properties...

- In Agents.jl, you can give your model properties by constructing a dictionary of these properties
- We are going to need a dictionary with just one item (one key--value pair)
- This dictionary item will hold the social network
- Since the social network is a property of the model, it is easy to reference it in our stepping function


## In practice

```{julia}
#| eval: true
mynet = watts_strogatz(20, 8, 0.1)

model = StandardABM(NetVL,
                    nothing,
                    agent_step! = VL_step!,
                    properties = Dict(:friends => mynet))
```

- Note how the network becomes the value in a dictionary, with the symbol `:friends` as its key


::: {.content-visible when-format="revealjs"}
## In practice
:::

```{julia}
for i in 1:20
  add_agent!(model, 0.01, 0.01, 0.2, 0.1)
end

model
```

##

```{julia}
using Statistics
adata, mdata = run!(model, 10_000; adata = [(:p, mean)])
adata
```

##

```{julia}
using Plots
plot(adata.time, adata.mean_p)
```


::: {.content-visible when-format="revealjs"}
## References
:::



