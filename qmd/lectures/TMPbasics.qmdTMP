---
title: "Programming basics"
date: 04/16/2024
categories:
  - lecture
#format:
#  revealjs:
#    output-file: basics-slides.html
---


## TUDÃš

- comments
- packages
- functions vs methods (multiple dispatch)
- meaning of dynamic typing
- custom types
- broadcasting of functions
- array comprehensions
- explicit type declarations for custom types and function arguments
- conditionals
- loops


## Variables and assignments

- In programming, a **variable** is a "storage box" that stores data for later use
- The data is **assigned** to the variable using the `=` operator
- Here, we assign the number 5 to a variable named `my_number`:

```{julia}
#| echo: true
#| output: false
my_number = 5
```

- We can now do things such as:

```{julia}
#| echo: true
my_number + my_number
```


## Fundamental types

- Variables can store different **types** of data:
  - Integers: `1`, `2`, `-100`, ...
  - Floating-point numbers ("floats"): `3.14`, `pi`, `1.0`, ...
  - Booleans: `true`, `false`
  - Strings: `"John"`, `"Mary"`
  - Arrays: `[1, 2, 3, 4]`, `[1 2 3 4]`
  - And some others... we'll meet them later


## Arithmetic operations

- Arithmetic operations are mostly self-explanatory. For example:

```{julia}
#| eval: true
number1 = 15
number2 = 20
number3 = 10*(number1 + number2) - number1/number2
number3
```


## String concatenation

- Julia overloads the `*` operator for strings too:

```{julia}
#| eval: true
string1 = "This "
string2 = "is a"
string3 = " sentence"
string1 * string2 * string3 * "!"
```


## Arrays

- An array is a (possibly multidimensional) collection of objects
  - A one-dimensional array is a vector, a two-dimensional array is a matrix, and so on
- Usually we work with arrays of numbers. They are easy to create:

```{julia}
#| eval: true
my_array = [10, 20, 30, 40]
```


## Accessing array contents

- The elements of an array can be accessed one-by-one by referencing their location or **index** in the array:

```{julia}
#| eval: true
my_array = [10, 20, 30, 40]
my_array[1]
```

or

```{julia}
#| eval: true
my_array[2]
```

::: {.content-visible when-format="revealjs"}
## Accessing array contents
:::

- The special keyword `end` fetches the last element:

```{julia}
#|eval: true
my_array[end]
```

- Arrays can also be subsetted:

```{julia}
#|eval: true
my_array[2:3]
```


## Broadcasting

- Suppose I want to add `1` to each number in `my_array`
- The following will **not** work:

```{julia}
#|eval: true
#|error: true
my_array + 1
```

::: {.content-visible when-format="revealjs"}
## Broadcasting
:::

- Why? Because mathematically the operation "add a scalar into a vector" is undefined
- To apply an operator **elementwise** to each element in an array, we can prefix the operator with a period. In Julia-speak, this is called **broadcasting**.

```{julia}
#|eval: true
my_array .+ 1
```


## Type mismatch

- Why does the following not work?

```{julia}
#|eval: true
#|error: true
my_string = "My shoe size is: "
my_number = 41
my_string * my_number
```

::: {.content-visible when-format="revealjs"}
## Type conversion
:::

- To make it work, we need to explicitly **convert** the integer into a string:

```{julia}
#|eval: true
my_string * string(my_number)
```


## Functions

- A **function**, sometimes also known as a **subroutine**, is a **reusable** piece of code that performs, well, some function...
- We define it once and then can use it as many times as we like
- A function can (but need not) take inputs -- these are known as the function's **arguments**
- A function can (but need not) give an output -- this is known as the function's **return value**


## Functions: example

- Here is a function that takes two arguments, an array and a scalar number, and adds the scalar to each element of the array
- I'm calling the function `add_elementwise`

```{julia}
#|eval: true
function add_elementwise(array, scalar)
  result = array .+ scalar
  return result
end
```

::: {.content-visible when-format="revealjs"}
## Functions: example
:::

- We can now **call** the function on particular arrays and numbers:

```{julia}
#|eval: true
my_array = [10, 20, 30, 40]
add_elementwise(my_array, 1)
```

::: {.content-visible when-format="revealjs"}
## Functions: example
:::

```{julia}
#|eval: true
add_elementwise(my_array, -23.5)
```


## Exercise

Write a function with the following properties:

- The function's name is `announce_age`
- The function takes two arguments, the first a person's name, the second a number that is that person's age
- The function's return value is a string which announces the person's age in this format: `"John is 40 years old"`

::: {.content-visible when-format="revealjs"}
## Exercise
:::

::: {.callout-tip collapse=true title="Answer"}
Here is the function definition:

```{julia}
#|eval: true
function announce_age(name, age)
  return name * " is " * string(age) * " years old"
end
```

Let's test it:

```{julia}
#|eval: true
announce_age("John", 40)
```
:::


## Custom types ("classes" and "objects")

- Idea of **object-oriented programming** (OOP): we can make custom types (**classes**) which are instantiated as **objects**
  - Programming ABMs in a language that does not support this would be very cumbersome
- In Julia, custom types are defined by way of a special keyword, `struct`
- A custom type is effectively a combination of variables called the type's **fields**
- If the fields need to be modifiable later in the program, we use `mutable struct` instead of `struct`


## Custom types: example

- Suppose we want to represent a person by way of their name, their age and their shoe size
- Since these fields (at least age) need to be modifiable, we use a `mutable struct`:

```{julia}
#|eval: true
mutable struct Person
  name::String
  age::Int
  shoesize::Float64
end
```











## OLD

## Arrays and broadcasting

To represent a tuple (or vector) of numbers, we can make an **array**:

```{julia}
#| output: false
manynumbers = [1, 4, 6, 2, 20]
```

The contents of an array can be fetched one by one, if necessary, or subsetted:

```{julia}
#| output: false
manynumbers[2] # equals 4
manynumbers[2:3] # equals [4, 6]
```

The special keyword `end` fetches the last item in an array:

```{julia}
#| output: false
manynumbers[end] # equals 20
```

Operations and functions (we'll talk about functions below) in Julia can be **broadcast**, meaning that they are applied elementwise to all elements in an array. To take a simple example, suppose we want to add 1 to each element in our array of integers, `manynumbers`. The following won't do, because we'd be trying to add a scalar to a vector, something that isn't mathematically defined:

```{julia}
#| eval: false
manynumbers + 1 # will throw an error
```

The following *will* work, but is cumbersome to write:

```{julia}
manynumbers + [1, 1, 1, 1, 1]
```

Instead of this, we can use the special `.` prefix to apply the sum operation elementwise:

```{julia}
manynumbers .+ 1
```

Note how the output is exactly the same.


## Custom types

Sometimes basic types aren't quite enough. For example, suppose we want to simulate the behaviour of a speaker--listener, i.e. an agent that has some representation of language and can interact with other agents. Is it an integer? A floating-point number? A string? It isn't really any of these. What we want to do is to be able to define our own data structure, our own type.

For example, suppose that we can represent a speaker's grammar as an integer (on the assumption that we index all grammars with the natural numbers). Suppose, moreover, that we are interested in a speaker's age as well as its social class. Then we might want a data type such as the following, called a **composite type** in Julia:

```{julia}
mutable struct Speaker
  grammar::Int
  age::Float64
  class::String
end
```

In this definition, we introduce a composite type consisting of three primitive type inside it: a `grammar`, an `age`, and a (social) `class`. The first is declared to be an integer, the second a floating-point number with 64 bits of precision, and the third a string.

::: {.callout-note}
The keyword `mutable` is important in the type's definition. If we leave it out, any objects created with this type will be immutable, and cannot be changed once they've been created. We will see examples of this in the main chapters of these lecture notes.
:::

Think of a composite type such as this as a *template*. We can use and reuse the same template to create multiple instances, or **objects**, of that template. For example:

```{julia}
#| output: false
alice = Speaker(1, 22.5, "middle")
bob = Speaker(2, 40.0, "lower")
```

This will create two `Speaker` objects and store them in the variables `alice` and `bob`. The first instance has a grammar of type `1` (we haven't really specified yet what that means---but we will in the main chapters of these notes), the second a grammar of type `2`. The first has an age of `22.5` (which we might interpret as years), the second an age of `40.0`. Finally, the first speaker is defined to be middle-class, the second, lower-class.


## Functions

The actual functionality of composite objects will be defined by **functions**, which manipulate those objects.

For example, suppose we want to implement a function that changes a speaker's grammar to `i` (from whichever value it happens to have at the moment), where `i` is some integer. This we can achieve with the following function. The function takes two **arguments**: a `Speaker` object, and `i`. It then modifies the speaker's `grammar` field to read `i`. (Fields are accessed using the `.` notation.)

```{julia}
#| output: false
function change_grammar!(x::Speaker, i::Int)
  x.grammar = i
end
```

Here's a function that increments a speaker's age by one year:

```{julia}
#| output: false
function grow!(x::Speaker)
  x.age = x.age + 1
end
```

::: {.callout-note}
By convention, functions which modify things are appended with a `!` in their name in Julia. This is not mandatory, but is good practice, since looking at the function name immediately tells you whether the function modifies an object or not.
:::

Functions do not need to manipulate objects created from composite types: they can do many other things, too. For example, the following function takes three integers and returns their sum:

```{julia}
#| output: false
function sum3(x::Int, y::Int, z::Int)
  return x + y + z
end
```

We can then call the function like this:

```{julia}
firstnumber = 4
secondnumber = 3
thirdnumber = 3
sum3(firstnumber, secondnumber, thirdnumber)
```

Functions need not have return values---indeed, our `change_grammar!` function doesn't have one. Some functions also have no arguments, like the following function which simply prints the string `"Hello, world!"` to the screen:

```{julia}
function sayhello()
  println("Hello, world!")
end

sayhello()
```


## Constructors

**Constructors** are special functions used to create objects from composite types. Recall that, above, we created a speaker like this:

```{julia}
#| output: false
alice = Speaker(1, 22.5, "middle")
```

What if we want each speaker to have age 0 when they are created? This is easy to do with a constructor that supplies this default value. The constructor will have to have the same name as the composite type.

```{julia}
#| output: false
function Speaker(grammar::Int, class::String)
  Speaker(grammar, 0.0, class)
end
```

What this constructor function does is to simply call the default constructor (which takes three values), supplying `0.0` as the new speaker's age.

::: {.callout-note}
There is a shorter and possibly more intuitive way of definining this constructor:

```{julia}
#| output: false
Speaker(grammar::Int, class::String) = Speaker(grammar, 0.0, class)
```
:::

Defining a new constructor does not remove the default constructor. Hence we can "birth" a speaker at age 10, for example, if we want to:

```{julia}
#| output: false
baby = Speaker(1, "middle") # 0 years old
child = Speaker(1, 10.0, "middle") # 10 years old
```


## Control flow

Programs often need to check whether some condition is fulfilled or not, and continue one way or another depending on that check's outcome. For example, suppose we want to implement a `class_trip` function that takes a speaker from their social class to the one immediately higher class. We could write something like the following:

```{julia}
#| output: false
function classtrip!(x::Speaker)
  if x.class == "lower"
    x.class = "middle"
  elseif x.class == "middle"
    x.class = "upper"
  elseif x.class == "upper"
    println("Cannot take a class trip - class already upper!")
  else
    println("Speaker is of unknown class.")
  end
end
```

::: {.callout-note}
Note the very crucial difference between `==` and `=`. The double equals sign is used for comparisons, the single one for assignments. Confusing these two is a very common source of beginner errors.
:::


## Loops

Programs also often need to carry out some action repetitively. For example, suppose we wish to define a function that takes an array of numbers of *arbitrary* length and returns the mean of the numbers in that array. Our function will need to take the sum over the entire array, then divide by the length of the array. One way of doing this is by using a `for` loop. (Note that `Array{Float64}` specifies that we expect, as input, an array of floating-point numbers, and that `length` is a function that returns the number of elements in an array.)

```{julia}
function average(x::Array{Float64})
  S = 0

  for i in 1:length(x)
    S = S + x[i]
  end

  return S/length(x)
end

# try it out
numbers = [20.0, 43.0, 20.3, 30.3]
average(numbers)
```

::: {.callout-note}
This example is a bit silly, since Julia (of course) already has a ready-made function that takes sums over arrays: `sum`. But it serves to illustrate how `for` loops operate.
:::

Another use case for a `for` loop might be the following. Suppose we have collected a number of `Speaker` objects in an array, and wish to print out the age of each speaker. This is easy to do:

```{julia}
alice = Speaker(1, 22.5, "middle")
bob = Speaker(2, 40.0, "lower")
caroline = Speaker(1, 80.8, "lower")

speakers = [alice, bob, caroline]

for i in 1:length(speakers)
  println(speakers[i].age)
end
```

However, there is an even better (a more "Julian", i.e. more idiomatic) solution. We first write a function that returns a speaker's age:

```{julia}
#| output: false
function get_age(x::Speaker)
  return x.age
end
```

Or using the shorter syntax:

```{julia}
#| output: false
get_age(x::Speaker) = x.age
```

We can then use the `.` affix to apply this function to each speaker in our array:

```{julia}
get_age.(speakers)
```

This returns a three-element vector containing the speakers' ages, but does not print it to the terminal. If we want the latter too, we just call `println`, broadcast over the array:

```{julia}
#| output: false
println.(get_age.(speakers))
```


## Array comprehensions

Another powerful feature of the Julia language are **array comprehensions**. An array comprehension is used to create an array by repeatedly executing a desired expression. For example, suppose we want to generate an array that consists of the squares of the first 100 natural numbers, including zero (so the array needs to contain $0^2 = 0$, $1^2 = 1$, $2^2 = 4$ and so on).

```{julia}
[i^2 for i in 0:99]
```

The expression to be evaluated in an array comprehension can be arbitrarily complex; for example, it can be a function. Suppose we wanted (for whatever reason) to create an array that repeats the age of our speaker `alice` fifty times. We could accomplish this with the following array comprehension:

```{julia}
[get_age(alice) for i in 1:50]
```

You will find more useful applications of array comprehensions in the main chapters; they are often the most elegant way of creating trajectories over entire populations of speakers, for example.


## Preparing for the future

Go ahead and install the following packages, which we will rely on later. *Plots* is used to draw figures, and *Agents* gives some useful functionality for agent-based models.

```{julia}
#| eval: false
Pkg.add("Plots")
Pkg.add("Agents")
```



